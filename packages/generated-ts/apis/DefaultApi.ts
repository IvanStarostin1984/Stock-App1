/* tslint:disable */
/* eslint-disable */
/**
 * SMWA API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  NewsArticle,
  Quote,
} from '../models/index';
import {
    NewsArticleFromJSON,
    NewsArticleToJSON,
    QuoteFromJSON,
    QuoteToJSON,
} from '../models/index';

export interface NewsGetRequest {
    symbol: string;
}

export interface QuoteGetRequest {
    symbol: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Get news
     */
    async newsGetRaw(requestParameters: NewsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<NewsArticle>>> {
        if (requestParameters['symbol'] == null) {
            throw new runtime.RequiredError(
                'symbol',
                'Required parameter "symbol" was null or undefined when calling newsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['symbol'] != null) {
            queryParameters['symbol'] = requestParameters['symbol'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/news`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NewsArticleFromJSON));
    }

    /**
     * Get news
     */
    async newsGet(requestParameters: NewsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<NewsArticle>> {
        const response = await this.newsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get quote
     */
    async quoteGetRaw(requestParameters: QuoteGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Quote>> {
        if (requestParameters['symbol'] == null) {
            throw new runtime.RequiredError(
                'symbol',
                'Required parameter "symbol" was null or undefined when calling quoteGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['symbol'] != null) {
            queryParameters['symbol'] = requestParameters['symbol'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/quote`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuoteFromJSON(jsonValue));
    }

    /**
     * Get quote
     */
    async quoteGet(requestParameters: QuoteGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Quote> {
        const response = await this.quoteGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

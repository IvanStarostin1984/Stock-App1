/* tslint:disable */
/* eslint-disable */
/**
 * SMWA API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface NewsArticle
 */
export interface NewsArticle {
    /**
     * 
     * @type {string}
     * @memberof NewsArticle
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof NewsArticle
     */
    url: string;
    /**
     * 
     * @type {string}
     * @memberof NewsArticle
     */
    source: string;
    /**
     * 
     * @type {Date}
     * @memberof NewsArticle
     */
    published: Date;
}

/**
 * Check if a given object implements the NewsArticle interface.
 */
export function instanceOfNewsArticle(value: object): value is NewsArticle {
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('url' in value) || value['url'] === undefined) return false;
    if (!('source' in value) || value['source'] === undefined) return false;
    if (!('published' in value) || value['published'] === undefined) return false;
    return true;
}

export function NewsArticleFromJSON(json: any): NewsArticle {
    return NewsArticleFromJSONTyped(json, false);
}

export function NewsArticleFromJSONTyped(json: any, ignoreDiscriminator: boolean): NewsArticle {
    if (json == null) {
        return json;
    }
    return {
        
        'title': json['title'],
        'url': json['url'],
        'source': json['source'],
        'published': (new Date(json['published'])),
    };
}

export function NewsArticleToJSON(json: any): NewsArticle {
    return NewsArticleToJSONTyped(json, false);
}

export function NewsArticleToJSONTyped(value?: NewsArticle | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'title': value['title'],
        'url': value['url'],
        'source': value['source'],
        'published': ((value['published']).toISOString()),
    };
}

